/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ToasterPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_1inch"
      | "approveMax"
      | "balances"
      | "decreaseLiqduidity"
      | "fee"
      | "fillOrderPostInteraction"
      | "increaseLiquidity"
      | "init"
      | "isInRange"
      | "lock"
      | "locked"
      | "owner"
      | "period"
      | "pool"
      | "positionManager"
      | "rebalance"
      | "reinvest"
      | "renounceOwnership"
      | "setPeriod"
      | "state"
      | "strategy"
      | "tickSpacing"
      | "token0"
      | "token1"
      | "transferOwnership"
      | "uniswapV3SwapCallback"
      | "userShare"
      | "zapCalculator"
      | "zapLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecreaseLiquidity"
      | "IncreaseLiquidity"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_1inch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveMax",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiqduidity",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fillOrderPostInteraction",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isInRange", values?: undefined): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reinvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(functionFragment: "strategy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userShare",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "zapCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zapLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_1inch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiqduidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderPostInteraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInRange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reinvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zapCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zapLiquidity",
    data: BytesLike
  ): Result;
}

export namespace DecreaseLiquidityEvent {
  export type InputTuple = [
    user: AddressLike,
    decreasedAmount0: BigNumberish,
    decreasedAmount1: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    decreasedAmount0: bigint,
    decreasedAmount1: bigint
  ];
  export interface OutputObject {
    user: string;
    decreasedAmount0: bigint;
    decreasedAmount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseLiquidityEvent {
  export type InputTuple = [
    user: AddressLike,
    investedAmount0: BigNumberish,
    investedAmount1: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    investedAmount0: bigint,
    investedAmount1: bigint
  ];
  export interface OutputObject {
    user: string;
    investedAmount0: bigint;
    investedAmount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ToasterPool extends BaseContract {
  connect(runner?: ContractRunner | null): ToasterPool;
  waitForDeployment(): Promise<this>;

  interface: ToasterPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _1inch: TypedContractMethod<[], [string], "view">;

  approveMax: TypedContractMethod<
    [token: AddressLike, spender: AddressLike],
    [void],
    "nonpayable"
  >;

  balances: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  decreaseLiqduidity: TypedContractMethod<
    [user: AddressLike, decreasedShare: BigNumberish],
    [void],
    "nonpayable"
  >;

  fee: TypedContractMethod<[], [bigint], "view">;

  fillOrderPostInteraction: TypedContractMethod<
    [
      arg0: BytesLike,
      maker: AddressLike,
      arg2: AddressLike,
      arg3: BigNumberish,
      takingAmount: BigNumberish,
      remainingAmount: BigNumberish,
      interactionData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  increaseLiquidity: TypedContractMethod<
    [user: AddressLike, amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;

  init: TypedContractMethod<
    [
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isInRange: TypedContractMethod<[], [boolean], "view">;

  lock: TypedContractMethod<[], [void], "nonpayable">;

  locked: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  period: TypedContractMethod<[], [bigint], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  positionManager: TypedContractMethod<[], [string], "view">;

  rebalance: TypedContractMethod<
    [newTickLower: BigNumberish, newTickUpper: BigNumberish],
    [void],
    "nonpayable"
  >;

  reinvest: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPeriod: TypedContractMethod<[_period: BigNumberish], [void], "nonpayable">;

  state: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        tokenId: bigint;
        tickLower: bigint;
        tickUpper: bigint;
        liquidity: bigint;
        totalShare: bigint;
      }
    ],
    "view"
  >;

  strategy: TypedContractMethod<[], [string], "view">;

  tickSpacing: TypedContractMethod<[], [bigint], "view">;

  token0: TypedContractMethod<[], [string], "view">;

  token1: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV3SwapCallback: TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  userShare: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  zapCalculator: TypedContractMethod<[], [string], "view">;

  zapLiquidity: TypedContractMethod<
    [amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_1inch"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveMax"
  ): TypedContractMethod<
    [token: AddressLike, spender: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "decreaseLiqduidity"
  ): TypedContractMethod<
    [user: AddressLike, decreasedShare: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fillOrderPostInteraction"
  ): TypedContractMethod<
    [
      arg0: BytesLike,
      maker: AddressLike,
      arg2: AddressLike,
      arg3: BigNumberish,
      takingAmount: BigNumberish,
      remainingAmount: BigNumberish,
      interactionData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseLiquidity"
  ): TypedContractMethod<
    [user: AddressLike, amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isInRange"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "locked"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "period"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [newTickLower: BigNumberish, newTickUpper: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reinvest"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPeriod"
  ): TypedContractMethod<[_period: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        tokenId: bigint;
        tickLower: bigint;
        tickUpper: bigint;
        liquidity: bigint;
        totalShare: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "strategy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tickSpacing"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token0"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV3SwapCallback"
  ): TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userShare"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "zapCalculator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zapLiquidity"
  ): TypedContractMethod<
    [amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DecreaseLiquidity"
  ): TypedContractEvent<
    DecreaseLiquidityEvent.InputTuple,
    DecreaseLiquidityEvent.OutputTuple,
    DecreaseLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseLiquidity"
  ): TypedContractEvent<
    IncreaseLiquidityEvent.InputTuple,
    IncreaseLiquidityEvent.OutputTuple,
    IncreaseLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "DecreaseLiquidity(address,uint256,uint256)": TypedContractEvent<
      DecreaseLiquidityEvent.InputTuple,
      DecreaseLiquidityEvent.OutputTuple,
      DecreaseLiquidityEvent.OutputObject
    >;
    DecreaseLiquidity: TypedContractEvent<
      DecreaseLiquidityEvent.InputTuple,
      DecreaseLiquidityEvent.OutputTuple,
      DecreaseLiquidityEvent.OutputObject
    >;

    "IncreaseLiquidity(address,uint256,uint256)": TypedContractEvent<
      IncreaseLiquidityEvent.InputTuple,
      IncreaseLiquidityEvent.OutputTuple,
      IncreaseLiquidityEvent.OutputObject
    >;
    IncreaseLiquidity: TypedContractEvent<
      IncreaseLiquidityEvent.InputTuple,
      IncreaseLiquidityEvent.OutputTuple,
      IncreaseLiquidityEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
